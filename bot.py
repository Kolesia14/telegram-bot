import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from database import Database

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS").split(",")))
LOW_STOCK_THRESHOLD = 4  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ 4
DB_PATH = "inventory.db"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
db = Database(DB_PATH)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
menu_guest = ReplyKeyboardMarkup(resize_keyboard=True)
menu_guest.add(KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–∫–∏"))

menu_admin = ReplyKeyboardMarkup(resize_keyboard=True)
menu_admin.add(
    KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–∫–∏"),
    KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"),
    KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é"),
    KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"),
)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id in ADMIN_IDS


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Å—Ç–∞—Ç–∫–æ–≤
def format_inventory(inventory):
    response = ""
    for section, items in inventory.items():
        response += f"üì¶ <b>{section}</b>\n"
        for item, quantity in items:
            color = "üî¥" if quantity < LOW_STOCK_THRESHOLD else "üü¢"
            response += f" {color} {item} ‚Äî {quantity} —à—Ç.\n"
        response += "\n"
    return response if response else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–µ."


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    if is_admin(message.from_user.id):
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_admin
        )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏.",
            reply_markup=menu_guest,
        )


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
@dp.message_handler(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–∫–∏")
async def view_inventory(message: types.Message):
    inventory = db.get_inventory()
    response = format_inventory(inventory)
    await message.answer(response, parse_mode="HTML")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é" and is_admin(message.from_user.id))
async def add_item_prompt(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –†–∞–∑–¥–µ–ª, –ù–∞–∑–≤–∞–Ω–∏–µ, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")


@dp.message_handler(lambda message: is_admin(message.from_user.id))
async def add_item(message: types.Message):
    if "," in message.text:
        try:
            section, item, quantity = map(str.strip, message.text.split(","))
            quantity = int(quantity)
            db.add_item(section, item, quantity)
            await message.answer(f"–ü–æ–∑–∏—Ü–∏—è {item} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª {section}.")
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await message.answer("–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –†–∞–∑–¥–µ–ª, –ù–∞–∑–≤–∞–Ω–∏–µ, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é" and is_admin(message.from_user.id))
async def edit_item_prompt(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ, –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")


@dp.message_handler(lambda message: is_admin(message.from_user.id))
async def edit_item(message: types.Message):
    if "," in message.text:
        try:
            item, quantity = map(str.strip, message.text.split(","))
            quantity = int(quantity)
            db.update_item(item, quantity)
            await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {item} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {quantity}.")
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await message.answer("–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ, –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é" and is_admin(message.from_user.id))
async def delete_item_prompt(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")


@dp.message_handler(lambda message: is_admin(message.from_user.id))
async def delete_item(message: types.Message):
    item = message.text.strip()
    db.delete_item(item)
    await message.answer(f"–ü–æ–∑–∏—Ü–∏—è {item} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_unknown(message: types.Message):
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    from aiogram import executor

    try:
        executor.start_polling(dp, skip_updates=True)
    finally:
        db.close()